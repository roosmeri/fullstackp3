{"version":3,"sources":["components/Entry.js","components/Filter.js","components/PersonForm.js","services/persons.js","components/Notification.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Entry","person","deletePerson","name","number","onClick","Filter","newFilter","handleFilterChange","value","onChange","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","baseUrl","getAll","axios","get","then","response","console","log","data","Notification","message","className","Error","App","useState","persons","setPersons","setNewName","setNewNumber","setNewFilter","setMessage","errorMessage","setErrorMessage","useEffect","doMessaging","text","setTimeout","doErroring","updatePerson","idx","window","confirm","id","newObject","old","put","updated","catch","error","delete","deleted","filter","p","entryList","startsWith","map","key","event","target","preventDefault","indexOf","post","added","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b57ca32.chunk.js","sourcesContent":["import React from 'react'\n\nconst Entry = ({ person, deletePerson }) => {\n    return (\n        <li>{person.name} {person.number}<button onClick={() => deletePerson(person)}>delete</button>\n        </li>\n    )\n}\n\nexport default Entry","import React from 'react'\n\nconst Filter = ({newFilter, handleFilterChange}) => {\n    return (\n        <div>filter shown with<input value={newFilter} onChange={handleFilterChange}/></div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\n\n\nconst PersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange}) => {\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                name: <input value={newName} onChange={handleNameChange} />\n            </div>\n            <div>number: <input value={newNumber} onChange={handleNumberChange} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(`${baseUrl}`)\n  return request.then(response => {\n    console.log(response.data)\n    return response.data\n  })\n}\n\nconst create = newObject => {\n  const request = axios.post(`${baseUrl}/`, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletion = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport { getAll, create, update, deletion }","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"message\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Error = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Error","import React, { useState, useEffect } from 'react'\nimport Entry from './components/Entry'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport { getAll, create, deletion, update } from './services/persons'\nimport Notification from './components/Notification'\nimport Error from './components/Error'\n\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n  const [message, setMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    getAll().then(data => setPersons(data))\n  }, [])\n\n\n  const doMessaging = (text) => {\n    setMessage(text)\n    setTimeout(() => {\n      setMessage(null)\n    }, 5000)\n  }\n\n  const doErroring = (text) => {\n    setErrorMessage(text)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n  }\n\n  const updatePerson = (idx) => {\n    window.confirm(`${newName} is already added to phonebook, replace existing number?`)\n\n    const old = persons[idx]\n    update(old.id, { name: old.name, number: newNumber })\n      .then(updated => {\n        getAll().then(data => setPersons(data))\n        console.log(\"After update \", persons)\n        doMessaging(`Number of ${newName} was updated.`)\n        setNewName('')\n        setNewNumber('')\n      })\n      .catch(error => {\n        console.log('fail')\n        doErroring(`Could not update ${old.name}, not found on server.`)\n      })\n  }\n\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const idx = persons.map(person => person.name).indexOf(newName)\n    if (idx !== -1) {\n      updatePerson(idx)\n      return\n    }\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    create(personObject)\n      .then(added => {\n        setPersons(persons.concat(added))\n        console.log(persons)\n        doMessaging(`Added ${newName} succesfully.`)\n        setNewName('')\n        setNewNumber('')\n      })\n      .catch(error => {\n        console.log(error.response.data)\n        doErroring(error.response.data.error)\n      })\n\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const deletePerson = (person) => {\n    window.confirm(`Delete ${person.name}?`)\n\n    deletion(person.id)\n      .then(deleted => {\n        setPersons(persons\n          .filter(p => p.id !== person.id))\n        console.log(persons)\n        doMessaging(`Deleted ${person.name}`)\n      })\n      .catch(error => {\n        console.log('fail')\n        doErroring(`Could not delete ${person.name}, not found on server.`)\n      })\n  }\n\n  const personsToShow = persons.filter(person => person.name.startsWith(newFilter))\n\n  const entryList = personsToShow.map(person => {\n    return (\n      <Entry key={person.name} person={person} deletePerson={deletePerson} />\n    )\n  })\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Error message={errorMessage} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <h3>Add a new number</h3>\n      <PersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\n      <h2>Numbers</h2>\n      <div>\n        {entryList}\n      </div>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}